#! /usr/bin/env bash

set -e

if [ $# -lt 1 ]; then
	echo "work-in-ramdisk init <size> [workingdir]"
	echo "  or"
	echo "work-in-ramdisk sync [ramdiskdir]"
	echo "  or"
	echo "work-in-ramdisk exit [ramdiskdir]"
	echo ""
	echo "  Size is the number of GiB to use for the RAM disk."
	echo "  Default workingdir and ramdiskdir is the current directory."
	exit 0
fi

command=$1

if [ "$command" != "init" ] && [ "$command" != "sync" ] && [ "$command" != "exit" ]; then
	echo "Error: Unknown command \"$command\". Has to be init, sync or exit. Aborting." >&2
	exit 1
fi

working_dir=$(pwd)
ramdisk_sub_dir=$(pwd) # a subdir is used because we dont want to handle the mount dir itself. Because the rsync throws errors because of permissions
ramdisk_dir=           # directory where the RAM disk is mounted
tmp_dir=               # place where we move the original working directory to, so we can symlink the workingdir into the ramdisk. E.g. now vimsession find the correct files for editing

config_file=".work-in-ramdisk.config"

if [ "$command" = "init" ]; then

	if [ $# -lt 2 ]; then
		echo "Error: Not enough arguments. Aborting." >&2
		exit 1
	fi

	size=$2
	non_numbers=$(echo "$size" | grep "[^0-9]" || true) # without || true set -e would cause the program to exit here

	if [ -n "$non_numbers" ]; then
		echo "Size ($size) is not an integer. Aborting." >&2
		exit 1
	fi

	size_mb=$(expr $size \* 1024) # use MiB internally because we have to user integers (rounding troubles)

	if [ $# -ge 3 ]; then
		working_dir=$(cd $3 && pwd)
	fi

	working_dir_size=$(du -d0 -BM $working_dir | sed s/[^0-9]//g)

	if [ $working_dir_size -gt $size_mb ]; then
		echo "Error: Working directory is larger ($working_dir_size MiB) than your specified RAM disk size ($size GiB). Aborting." >&2
		exit 1
	fi

	size_max=$(expr $(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024 )
	size_warn=$(expr $(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024 / 2)

	if [ $size_mb -gt $size_max ]; then
		echo "Error: Requested RAM disk size ($size GiB) is larger than your total RAM ($size_max MiB). Aborting." >&2
		exit 1
	fi

	if [ $size_mb -gt $size_warn ]; then
		echo "Warning: Requested RAM disk size ($size GiB) is larger than half your total RAM ($size_max MiB)." >&2
	fi

elif [ "$command" = "sync" ] || [ "$command" = "exit" ]; then

	if [ $# -ge 2 ]; then
		ramdisk_sub_dir=$(cd $2 && pwd)
	fi

	if [ ! -e $ramdisk_sub_dir/$config_file ]; then
		echo "Error: Cannot find internal config file ($config_file) in $ramdisk_sub_dir . Aborting." >&2
		exit 1
	fi

	working_dir=$(head -n 1 $ramdisk_sub_dir/$config_file)
	tmp_dir=$(tail -n 1 $ramdisk_sub_dir/$config_file)
	ramdisk_dir=$(dirname $ramdisk_sub_dir)

fi

if [ "$command" = "init" ]; then

	ramdisk_dir=$(sudo mktemp -d -t tmpfs-XXXXXX -p /mnt/)
	sudo mkdir -p $ramdisk_dir
	sudo mount -t tmpfs -o size=${size}g tmpfs $ramdisk_dir

	above_working_dir=$(dirname $working_dir)
	working_dir_name=$(basename $working_dir)

	tmp_dir=$(mktemp -d -t -u $working_dir_name-XXXXXX -p $above_working_dir)

	ramdisk_sub_dir=$ramdisk_dir/$working_dir_name #avoid the problem that you cannot change the timestamp on the mount folder
	mkdir -p $ramdisk_sub_dir

	rsync -rlht . $ramdisk_sub_dir

	mv $working_dir $tmp_dir
	ln -s $ramdisk_sub_dir $working_dir

	echo "$working_dir"  > $ramdisk_sub_dir/$config_file
	echo "$tmp_dir"     >> $ramdisk_sub_dir/$config_file

	echo "RAM disk has been successfully set up in $ramdisk_sub_dir ."
	echo ""
	echo "End your session and resync changes via"
	echo "  \$ work-in-ramdisk exit $ramdisk_sub_dir"
	echo "or just resync via"
	echo "  \$ work-in-ramdisk sync $ramdisk_sub_dir ."

else # sync or exit

	rsync -rlht $ramdisk_sub_dir/ $tmp_dir --delete

	echo "Successfully synced $ramdisk_sub_dir to $tmp_dir"

	if [ "$command" != "exit" ]; then # stop if we only wanted to sync
		exit 0
	fi

	rm $working_dir
	mv $tmp_dir $working_dir

	cd $working_dir

	lsof_1=$(lsof -t $ramdisk_dir || true) # avoid false positives from lsof itself
	lsof_2=$(lsof -t $ramdisk_dir || true)

	process_list=""
	for p1 in $lsof_1; do
		for p2 in $lsof_2; do
			if [ "$p1" = "$p2" ]; then
				process_list="$p1, $process_list"
			fi
		done
	done
	process_list=${process_list%, }

	if [ -n "$process_list" ]; then
		echo "Some processes ($process_list) are still using $ramdisk_dir . Cannot delete and unmount it."
		echo "Do it yourself later via:"
		echo "  $ sudo umount $ramdisk_dir"
		echo "  $ sudo rm -rf $ramdisk_dir"
	else
		sudo umount $ramdisk_dir
		sudo rm -rf $ramdisk_dir

		echo "Successfully ended session"
	fi

fi
